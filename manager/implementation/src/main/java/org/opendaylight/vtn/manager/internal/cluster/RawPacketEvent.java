/*
 * Copyright (c) 2013 NEC Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import org.slf4j.Logger;

import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

import org.opendaylight.controller.connectionmanager.IConnectionManager;
import org.opendaylight.controller.sal.core.Node;
import org.opendaylight.controller.sal.core.NodeConnector;
import org.opendaylight.controller.sal.packet.IDataPacketService;
import org.opendaylight.controller.sal.packet.RawPacket;

/**
 * {@code RawPacketEvent} describes an cluster event object which directs
 * cluster nodes to send raw packet to a SDN switch.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public class RawPacketEvent extends ClusterEvent {
    private static final long serialVersionUID = -3180714480988803267L;

    /**
     * Raw packet data.
     */
    private final byte[]  packetData;

    /**
     * A node connector associated with SDN switch port where the packet
     * should be sent.
     */
    private final NodeConnector  outgoingPort;

    /**
     * Construct a new raw packet event.
     *
     * @param data      A raw packet data. This constructor keeps the specified
     *                  byte array itself, not a copy. So the caller must
     *                  not modify the specified byte array.
     * @param outgoing  A node connector associated with SDN switch port
     *                  where the packet should be sent.
     */
    public RawPacketEvent(byte[] data, NodeConnector outgoing) {
        packetData = data;
        outgoingPort = outgoing;
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local) {
            mgr.transmit(packetData, outgoingPort);
        }
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public void traceLog(VTNManagerImpl mgr, Logger logger,
                         ClusterEventId key) {
        logger.trace("{}: {}: Received raw packet event: port={}",
                     mgr.getContainerName(), key, outgoingPort);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public boolean isSingleThreaded(boolean local) {
        return false;
    }
}
