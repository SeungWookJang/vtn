/*
 * Copyright (c) 2014 NEC Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import org.slf4j.Logger;

import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

import org.opendaylight.controller.sal.core.UpdateType;

/**
 * {@code PathPolicyEvent} describes an cluster event object which notifies
 * that a path policy was added, changed, or removed.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public final class PathPolicyEvent extends ClusterEvent {
    /**
     * Version number for serialization.
     */
    private static final long serialVersionUID = -1605893267323023010L;

    /**
     * The identifier of the path policy.
     */
    private final int  policyId;

    /**
     * Update type of this event.
     */
    private final UpdateType  updateType;

    /**
     * Generate a path policy event which indicates that the path policy
     * was added, removed, or changed.
     *
     * @param mgr   VTN Manager service.
     * @param id    The identifier of the path policy.
     * @param type  Update type.
     */
    public static void raise(VTNManagerImpl mgr, int id, UpdateType type) {
        mgr.enqueueEvent(new PathPolicyEvent(id, type));
    }

    /**
     * Construct a new path policy event.
     *
     * @param id    The identifier of the path policy.
     * @param type  Update type.
     */
    private PathPolicyEvent(int id, UpdateType type) {
        policyId = id;
        updateType = type;
    }

    /**
     * Return the identifier of the path policy.
     *
     * @return  The identifier of the path policy.
     */
    public int getPolicyId() {
        return policyId;
    }

    /**
     * Return update type of this event.
     *
     * @return  Update type.
     */
    public UpdateType getUpdateType() {
        return updateType;
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local) {
            mgr.updatePathPolicy(policyId, updateType);
        }
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public void traceLog(VTNManagerImpl mgr, Logger logger,
                         ClusterEventId key) {
        logger.trace("{}:{}: Received path policy event: id={}, type={}",
                     mgr.getContainerName(), key, policyId, updateType);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public boolean isSingleThreaded(boolean local) {
        return true;
    }
}
