/*
 * Copyright (c) 2014 NEC Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import org.slf4j.Logger;

import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

import org.opendaylight.controller.sal.core.UpdateType;

/**
 * {@code FlowConditionEvent} describes an cluster event object which notifies
 * that a flow condition was added, changed, or removed.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public final class FlowConditionEvent extends ClusterEvent {
    /**
     * Version number for serialization.
     */
    private static final long serialVersionUID = -7615218001174276730L;

    /**
     * A pseudo match index which indicates the flow condition itself.
     */
    private static final int  INDEX_SELF = -1;

    /**
     * The name of the flow condition.
     */
    private final String  name;

    /**
     * The match index which specifies the flow match condition in the
     * flow condition.
     */
    private final int  index;

    /**
     * Update type of this event.
     */
    private final UpdateType  updateType;

    /**
     * Generate a flow condition event which indicates that the flow condition
     * was added, removed, or changed.
     *
     * @param mgr    VTN Manager service.
     * @param name   The name of the flow condition.
     * @param type   Update type.
     */
    public static void raise(VTNManagerImpl mgr, String name,
                             UpdateType type) {
        raise(mgr, name, INDEX_SELF, type);
    }

    /**
     * Generate a flow condition event which indicates that the flow match
     * condition in the flow condition was added, removed, or changed.
     *
     * @param mgr    VTN Manager service.
     * @param name   The name of the flow condition.
     * @param index  The match index that specifies the flow match condition.
     *               A negative value means that the flow condition itself
     *               was added, removed, or changed.
     * @param type   Update type.
     */
    public static void raise(VTNManagerImpl mgr, String name, int index,
                             UpdateType type) {
        mgr.enqueueEvent(new FlowConditionEvent(name, index, type));
    }

    /**
     * Construct a new flow condition event.
     *
     * @param name   The name of the flow condition.
     * @param index  The match index that specifies the flow match condition.
     *               A negative value means that the flow condition itself
     *               was added, removed, or changed.
     * @param type   Update type.
     */
    private FlowConditionEvent(String name, int index, UpdateType type) {
        this.name = name;
        this.index = index;
        updateType = type;
    }

    /**
     * Return the name of the flow condition.
     *
     * @return  The name of the flow condition.
     */
    public String getName() {
        return name;
    }

    /**
     * Return the match index which specifies the flow match condition in the
     * flow condition.
     *
     * @return  The match index.
     *          A negative value is returned if this event notifies that the
     *          flow condition was added, removed, or changed.
     */
    public int getIndex() {
        return index;
    }

    /**
     * Return update type of this event.
     *
     * @return  Update type.
     */
    public UpdateType getUpdateType() {
        return updateType;
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local) {
            mgr.updateFlowCondition(name, index, updateType);
        }
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public void traceLog(VTNManagerImpl mgr, Logger logger,
                         ClusterEventId key) {
        logger.trace("{}:{}: Received flow condition event: " +
                     "name={}, type={}, index={}",
                     mgr.getContainerName(), key, name, updateType, index);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public boolean isSingleThreaded(boolean local) {
        return true;
    }
}
