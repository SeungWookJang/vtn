/*
 * Copyright (c) 2013-2014 NEC Corporation
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.vtn.manager.internal.cluster;

import java.util.List;
import java.util.ArrayList;

import org.slf4j.Logger;

import org.opendaylight.controller.forwardingrulesmanager.FlowEntry;

import org.opendaylight.vtn.manager.internal.ClusterFlowModTask;
import org.opendaylight.vtn.manager.internal.VTNManagerImpl;

/**
 * {@code FlowModEvent} describes an cluster event object which directs
 * remote cluster node to modify the given flow entries.
 *
 * <p>
 *   Although this class is public to other packages, this class does not
 *   provide any API. Applications other than VTN Manager must not use this
 *   class.
 * </p>
 */
public abstract class FlowModEvent extends ClusterEvent {
    /**
     * Version number for serialization.
     */
    private static final long serialVersionUID = 3197194546736190157L;

    /**
     * List of flow entries to be modified.
     */
    private final List<FlowEntry>  flowEntries;

    /**
     * Construct a new flow mod event.
     *
     * @param entries  List of flow entries to be modified.
     */
    protected FlowModEvent(List<FlowEntry> entries) {
        flowEntries = new ArrayList(entries);
    }

    /**
     * Return a list of flow entries configured in this event.
     *
     * <p>
     *   This method is only for testing.
     * </p>
     *
     * @return  A list of flow entries.
     */
    public List<FlowEntry> getFlowEntries() {
        return new ArrayList<FlowEntry>(flowEntries);
    }

    /**
     * Invoked when a cluster event has been received.
     *
     * @param mgr    VTN Manager service.
     * @param local  {@code true} if this event is generated by the local node.
     */
    @Override
    protected final void eventReceived(VTNManagerImpl mgr, boolean local) {
        if (!local) {
            for (FlowEntry fent: flowEntries) {
                ClusterFlowModTask task = createTask(mgr, fent);
                mgr.postAsync(task);
            }
        }
    }

    /**
     * Record a trace log which indicates that a cluster event has been
     * received from remote node.
     *
     * @param mgr     VTN Manager service.
     * @param logger  A logger instance.
     * @param key     A cluster event key associated with this event.
     */
    @Override
    public final void traceLog(VTNManagerImpl mgr, Logger logger,
                               ClusterEventId key) {
        ArrayList<String> names = new ArrayList<String>();
        for (FlowEntry fent: flowEntries) {
            names.add(fent.getFlowName());
        }

        logger.trace("{}: {}: Received {}: {}", mgr.getContainerName(), key,
                     getClass().getSimpleName(), names);
    }

    /**
     * Determine whether this event should be delivered on the VTN task thread
     * or not.
     *
     * @param local  {@code true} if this event is generated by the local node.
     *               {@code false} if this event is generated by remote cluster
     *               node.
     * @return  {@code true} is returned if this event should be delivered
     *          on the VTN task thread. Otherwise {@code false} is returned.
     */
    @Override
    public final boolean isSingleThreaded(boolean local) {
        return false;
    }

    /**
     * Create a flow mod task to modify the given flow entry.
     *
     * @param mgr   VTN Manager service.
     * @param fent  A flow entry to be modified.
     * @return  A flow mod task to modify the given flow entry.
     */
    protected abstract ClusterFlowModTask createTask(VTNManagerImpl mgr,
                                                     FlowEntry fent);
}
